--@name PhysMeshViewer
--@author
--@shared

local holos = {}
if SERVER then

    local e = chip():isWeldedTo()
    local meshes = e:getPhysicsObject():getMeshConvexes()
    for i=1, #meshes do
        holos[i] = holograms.create(e:getPos(), e:getAngles(), "models/Combine_Helicopter/helicopter_bomb01.mdl")
        holos[i]:setMaterial("models/wireframe")
        holos[i]:setParent(e)
    end
    hook.add("net","",function(name,len,pl)    
        local name = pl:getName()
        local i = 1
        hook.add("think",name,function()
            if i>#meshes or not isValid(pl) then
                hook.remove("think",name)
                return
            end
            local m = meshes[i]
            if net.getBytesLeft()>(60+12*#m) then
                net.start("")
                net.writeEntity(holos[i])
                net.writeUInt(#m, 32)
                for o=1, #m do
                    net.writeVector(m[o].pos)
                end
                net.send(pl)
                i = i + 1
            end
        end)
    end)

else

    net.start("")
    net.send()
    
    hook.add("net","",function(n)
        local e = net.readEntity()
        local m = {}
        local mins, maxs = Vector(math.huge), Vector(-math.huge)
        for o=1, net.readUInt(32) do
            local pos = net.readVector()
            m[o] = {pos = pos}
            if pos[1] < mins[1] then mins[1] = pos[1] end
            if pos[2] < mins[2] then mins[2] = pos[2] end
            if pos[3] < mins[3] then mins[3] = pos[3] end
            if pos[1] > maxs[1] then maxs[1] = pos[1] end
            if pos[2] > maxs[2] then maxs[2] = pos[2] end
            if pos[3] > maxs[3] then maxs[3] = pos[3] end
        end
        
        e:setHologramMesh(mesh.createFromTable(m))
        e:setHologramRenderBounds(mins, maxs)
    end)
    
end
